"""
Django settings for deep_diary project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os
import coreschema
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# from deep_diary.config import mysql_account, oss
import django_oss_storage

BASE_DIR = Path(__file__).resolve().parent.parent
with open(os.path.join(BASE_DIR, 'deep_diary', 'config.json')) as f:
    cfg = json.load(f)

with open(os.path.join(BASE_DIR, 'deep_diary', 'calibration.json')) as f:
    calib = json.load(f)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0&&*)ta)v&qxbb!7yiz(pnz+%q2me614u21n3qoi!u1qozb56h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if cfg['debug'] == 'True' else False

# 允许所有的IP访问网络服务
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #
    # 'article',
    'library',
    'user_info',
    'comment',
    'tags',
    'project',
    'utils',

    'rest_framework',
    'django_filters',  # 过滤api接口数据
    'taggit',  # 实现标签系统
    'imagekit',  # 实现缩略图处理
    'mptt',  # 实现多级评论
    'coreschema',  # 解决跨域问题
    'django_oss_storage',
    'sslserver',  # 实现https
    'django_extensions',  # 生成数据库ER图
    # 'notifications',  # 实现消息通知
    # 'password_reset',  # 实现密码重置
    # 'debug_toolbar',  # 在视图中进行调试
    'drf_spectacular',  # 自动生成api文档
]

# 设置站点
SITE_ID = 1

# 登录成功后重定向地址
# LOGIN_REDIRECT_URL = '/api/article/'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',  # 在视图中进行调试
]

ROOT_URLCONF = 'deep_diary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'deep_diary.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# 获取要使用的数据库配置
database = cfg['database']
db_config = cfg[database]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db_config['DatabaseName'],  # mysql 下的数据库名
        'USER': db_config['USER'],
        'PASSWORD': db_config['PASSWORD'],
        'HOST': db_config['HOST'],
        'PORT': '3306',
    },
    # 'OPTIONS': {
    #     "init_command": "SET foreign_key_checks = 0;",
    # }

}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 将拓展的User替换系统默认的auth_user 模型
AUTH_USER_MODEL = "user_info.Profile"

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 配置OSS信息
OSS_ACCESS_KEY_ID = cfg['oss']['OSS_ACCESS_KEY_ID']
OSS_ACCESS_KEY_SECRET = cfg['oss']['OSS_ACCESS_KEY_SECRET']
OSS_ENDPOINT = cfg['oss']['OSS_ENDPOINT']
OSS_BUCKET_NAME = cfg['oss']['OSS_BUCKET_NAME']
OSS_BUCKET_ACL = "public-read"  # private, public-read, public-read-write
OSS_PREFIX = 'oss://'

# 设置上传的媒体文件
DEFAULT_FILE_STORAGE = 'django_oss_storage.backends.OssMediaStorage'
STATICFILES_STORAGE = 'django_oss_storage.backends.OssStaticStorage'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
# Staticfiles storage settings
STATIC_PREFIX = 'static/'
STATIC_URL = '/static/'  # 静态文件收集目录,使用本地静态资源文件
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# 指定需要收集的静态文件的位置
# 即前端打包文件所在位置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend/dist/')
]
# 静态文件收集目录
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

# File storage settings: ImageField and FileField
# MEDIA_PREFIX = 'media/'
# MEDIA_URL = '/media/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

IMG_ROOT = os.path.join(MEDIA_ROOT, 'img')
FACE_ROOT = os.path.join(MEDIA_ROOT, 'face')
FACE_INFO_ROOT = os.path.join(MEDIA_ROOT, 'face_info')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024  # 默认设置为5M

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # 没有配置，则没有分页
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    # )

    # python中认证的配置
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',  # 基本认证
        # 'rest_framework.authentication.SessionAuthentication',  # session认证
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT 身份认证
    ),
    # python中权限的配置，如果没有指明，系统默认的权限是允许所有人访问的
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

}

CKEDITOR_UPLOAD_PATH = "comments/"  # 文件保存位置，因为上边配置了media， 图片将保存至media/comments下
CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    'default': {
        'disallowedContent': 'img{width,height};img[width,height]',  # 去掉图片长宽限制
        "skin": "moono-lisa",
        # "uiColor": '#00FF00',  # 绿色，第一优先级
        # 使用简体中文
        'language': 'zh-cn',
        # 编辑器宽度自适应
        'width': 'auto',
        'height': '250px',
        'image_previewText': ' ',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        # 'toolbar': 'full',  # 完整工具条
        'toolbar': 'Custom',
        # 工具栏按钮
        'toolbar_Custom': [
            # 预览、表情 代码块
            ['Preview', 'CodeSnippet'],
            # 字体风格
            ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote', 'Strike', 'Subscript', 'Superscript'],
            # 字体颜色
            ['TextColor', 'BGColor', 'FontSize'],
            # 其它
            ['Image', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak'],
            # 链接
            ['Link', 'Unlink'],
            # 列表
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            # 居左，居中，居右
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            # 最大化
            ['Maximize']
        ],

        # 加入代码块插件
        # 添加 Prism 相关插件
        'extraPlugins': ','.join(
            ['codesnippet', 'uploadimage', 'image2', 'filebrowser', 'prism', 'widget', 'lineutils']),
    },
}

SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=20),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=20),
}

CORS_ORIGIN_ALLOW_ALL = True
SECURE_SSL_REDIRECT = False

broker_url = 'redis://127.0.0.1:6379/15'
result_backend = 'redis://127.0.0.1:6379/14'

# django-redis 配置
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "CONNECTION_POOL_KWARGS": {"max_connections": 100}
#             # "PASSWORD": "123",
#         }
#     }
# }
SPECTACULAR_SETTINGS = {
    'TITLE': 'Deep Diary API',
    'DESCRIPTION': 'Make personal data valuable, both for yourself and others',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}


if DEBUG:
    # django debug toolbar
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    # DEBUG_TOOLBAR_CONFIG = {
    #     'JQUERY_URL': '//cdn.bootcss.com/jquery/2.1.4/jquery.min.js',
    #     # 或把jquery下载到本地然后取消下面这句的注释, 并把上面那句删除或注释掉
    #     #'JQUERY_URL': '/static/jquery/2.1.4/jquery.min.js',
    #     'SHOW_COLLAPSED': True,
    #     'SHOW_TOOLBAR_CALLBACK': lambda x: True,
    # }
    # 在Django中使用django-debug-toolbar进行调试
    INTERNAL_IPS = [
        # 添加您的IP地址，例如 '127.0.0.1'
        '127.0.0.1'
    ]
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }