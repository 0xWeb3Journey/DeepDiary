# Generated by Django 3.2.9 on 2023-06-22 07:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import library.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('library', '0034_auto_20230131_2107'),
    ]

    operations = [
        migrations.CreateModel(
            name='Face',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_confirmed', models.BooleanField(blank=True, default=False, help_text='请对人脸名字进行确认', verbose_name='人脸是否已确认')),
                ('det_score', models.FloatField(blank=True, help_text='是人脸的概率', null=True, verbose_name='是人脸的概率')),
                ('face_score', models.FloatField(blank=True, help_text='是这个人的概率', null=True, verbose_name='是这个人的概率')),
                ('age', models.SmallIntegerField(blank=True, help_text='人脸的年龄，用于训练', null=True, verbose_name='人脸的年龄，用于训练')),
                ('gender', models.SmallIntegerField(choices=[(0, '男'), (1, '女'), (2, '保密')], default=2, help_text='0:男，1：女, 2： 保密', verbose_name='性别')),
                ('feat', models.BinaryField(blank=True, help_text='已识别的人脸特征向量', null=True, verbose_name='人脸特征')),
                ('src', models.ImageField(blank=True, default='sys_img/unknown.jpg', help_text='保存到本地的人脸路径', null=True, upload_to=library.models.face_directory_path, verbose_name='人脸路径')),
                ('url', models.ImageField(blank=True, default='sys_img/unknown.jpg', help_text='保存到网络的人脸路径', null=True, upload_to=library.models.face_directory_path, verbose_name='人脸路径')),
                ('x', models.IntegerField(blank=True, help_text='人脸左上角x坐标', null=True, verbose_name='左上角x坐标')),
                ('y', models.IntegerField(blank=True, help_text='人脸左上角y坐标', null=True, verbose_name='左上角y坐标')),
                ('wid', models.IntegerField(blank=True, help_text='人脸宽度', null=True, verbose_name='宽度')),
                ('height', models.IntegerField(blank=True, help_text='人脸高度', null=True, verbose_name='高度')),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
                ('det_method', models.SmallIntegerField(blank=True, choices=[(0, 'Lightroom'), (1, 'InsightFace'), (2, 'Others')], default=0, help_text='人脸检测方法', null=True, verbose_name='检测方法')),
                ('state', models.SmallIntegerField(blank=True, choices=[(0, '正常'), (1, '禁用'), (9, '已经删除')], default=0, help_text='0:正常，1：禁用, 9: 已经删除', null=True, verbose_name='人脸状态')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='指定其在创建数据时将默认写入当前的时间', verbose_name='首次创建的时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='指定每次数据更新时自动写入当前时间', verbose_name='最后更新的时间')),
            ],
            options={
                'ordering': ('-created_at',),
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='FaceLandmarks2D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('face', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='landmarks2d', to='library.face', verbose_name='所属人脸')),
            ],
        ),
        migrations.CreateModel(
            name='FaceLandmarks3D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('z', models.FloatField()),
                ('face', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='landmarks3d', to='library.face', verbose_name='所属人脸')),
            ],
        ),
        migrations.CreateModel(
            name='ImgMcs',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='img_mcs', serialize=False, to='library.img')),
                ('file_upload_id', models.IntegerField(blank=True, default=0, help_text='up load file id', null=True, verbose_name='up load file id')),
                ('file_name', models.CharField(blank=True, help_text='file name', max_length=40, null=True, verbose_name='file name')),
                ('file_size', models.IntegerField(blank=True, default=0, help_text='file_size', null=True, verbose_name='file_size')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='updated_at', verbose_name='updated_at')),
                ('nft_url', models.URLField(blank=True, default='https://calibration-ipfs.filswan.com/ipfs/QmQzPDUheTnFYA7HanxwCLw3QrR7choBvh8pswF4LgxguV', help_text='相当于一个图片源，可以展示图片', null=True, verbose_name='NFT 站点')),
                ('pin_status', models.CharField(blank=True, help_text='pin_status', max_length=8, null=True, verbose_name='pin_status')),
                ('payload_cid', models.CharField(blank=True, help_text='payload_cid', max_length=80, null=True, verbose_name='payload_cid')),
                ('w_cid', models.CharField(blank=True, help_text='w_cid', max_length=100, null=True, verbose_name='w_cid')),
                ('status', models.CharField(blank=True, help_text='status', max_length=8, null=True, verbose_name='status')),
                ('deal_success', models.BooleanField(blank=True, default=False, help_text='deal_success', verbose_name='deal_success')),
                ('is_minted', models.BooleanField(blank=True, default=False, help_text='is_minted', verbose_name='is_minted')),
                ('token_id', models.CharField(blank=True, help_text='token_id', max_length=8, null=True, verbose_name='token_id')),
                ('mint_address', models.CharField(blank=True, help_text='mint_address', max_length=80, null=True, verbose_name='mint_address')),
                ('nft_tx_hash', models.CharField(blank=True, help_text='nft_tx_hash', max_length=80, null=True, verbose_name='nft_tx_hash')),
            ],
        ),
        migrations.CreateModel(
            name='Kps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('face', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kps', to='library.face', verbose_name='所属人脸')),
            ],
        ),
        migrations.RemoveField(
            model_name='img',
            name='issue',
        ),
        migrations.AlterField(
            model_name='img',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='imgs', to=settings.AUTH_USER_MODEL, verbose_name='所属用户'),
        ),
        migrations.CreateModel(
            name='FaceMcs',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='face_mcs', serialize=False, to='library.face')),
                ('file_upload_id', models.IntegerField(blank=True, default=0, help_text='up load file id', null=True, verbose_name='up load file id')),
                ('file_name', models.CharField(blank=True, help_text='file_name', max_length=40, null=True, verbose_name='file_name')),
                ('file_size', models.IntegerField(blank=True, default=0, help_text='file_size', null=True, verbose_name='file_size')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='updated_at', verbose_name='updated_at')),
                ('nft_url', models.URLField(blank=True, default='https://calibration-ipfs.filswan.com/ipfs/QmQzPDUheTnFYA7HanxwCLw3QrR7choBvh8pswF4LgxguV', help_text='相当于一个图片源，可以展示图片', null=True, verbose_name='NFT 站点')),
                ('pin_status', models.CharField(blank=True, help_text='pin_status', max_length=8, null=True, verbose_name='pin_status')),
                ('payload_cid', models.CharField(blank=True, help_text='payload_cid', max_length=80, null=True, verbose_name='payload_cid')),
                ('w_cid', models.CharField(blank=True, help_text='w_cid', max_length=100, null=True, verbose_name='w_cid')),
                ('status', models.CharField(blank=True, help_text='status', max_length=8, null=True, verbose_name='status')),
                ('deal_success', models.BooleanField(blank=True, default=False, help_text='deal_success', verbose_name='deal_success')),
                ('is_minted', models.BooleanField(blank=True, default=False, help_text='is_minted', verbose_name='is_minted')),
                ('token_id', models.CharField(blank=True, help_text='token_id', max_length=8, null=True, verbose_name='token_id')),
                ('mint_address', models.CharField(blank=True, help_text='mint_address', max_length=80, null=True, verbose_name='mint_address')),
                ('nft_tx_hash', models.CharField(blank=True, help_text='nft_tx_hash', max_length=80, null=True, verbose_name='nft_tx_hash')),
            ],
        ),
        migrations.DeleteModel(
            name='Mcs',
        ),
        migrations.AddField(
            model_name='face',
            name='img',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faces', to='library.img', verbose_name='所属照片'),
        ),
        migrations.AddField(
            model_name='face',
            name='profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faces', to=settings.AUTH_USER_MODEL, verbose_name='所属人脸相册'),
        ),
    ]
